{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderbergqvist/Desktop/building-control/building-control-frontend/src/components/BuildingList.tsx\";\nimport React from 'react';\nimport { updateBuilding } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BuildingList = ({\n  buildings,\n  setBuildings\n}) => {\n  const handleTemperatureUpdate = async (id, newTemperature) => {\n    const buildingToUpdate = buildings.find(b => b.id === id);\n    if (buildingToUpdate) {\n      const updatedBuilding = {\n        ...buildingToUpdate,\n        temperature: newTemperature\n      };\n      await updateBuilding(id, updatedBuilding);\n      setBuildings(prev => prev.map(b => b.id === id ? updatedBuilding : b));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"building-list\",\n    children: buildings.map(building => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"building-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: building.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Location: \", building.location]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", building.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Temperature: \", building.temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"temperature-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"New Temperature:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            defaultValue: building.temperature,\n            id: `temp-input-${building.id}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-update\",\n          onClick: () => {\n            const input = document.getElementById(`temp-input-${building.id}`);\n            handleTemperatureUpdate(building.id, Number(input.value));\n          },\n          children: \"Update Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, building.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = BuildingList;\nexport default BuildingList;\nvar _c;\n$RefreshReg$(_c, \"BuildingList\");","map":{"version":3,"names":["React","updateBuilding","jsxDEV","_jsxDEV","BuildingList","buildings","setBuildings","handleTemperatureUpdate","id","newTemperature","buildingToUpdate","find","b","updatedBuilding","temperature","prev","map","className","children","building","name","fileName","_jsxFileName","lineNumber","columnNumber","location","status","type","defaultValue","onClick","input","document","getElementById","Number","value","_c","$RefreshReg$"],"sources":["/Users/alexanderbergqvist/Desktop/building-control/building-control-frontend/src/components/BuildingList.tsx"],"sourcesContent":["import React from 'react';\nimport { updateBuilding } from '../services/api';\nimport { Building } from '../types/types';\n\ninterface BuildingListProps {\n  buildings: Building[];\n  setBuildings: React.Dispatch<React.SetStateAction<Building[]>>;\n}\n\nconst BuildingList: React.FC<BuildingListProps> = ({ buildings, setBuildings }) => {\n  const handleTemperatureUpdate = async (id: number, newTemperature: number) => {\n    const buildingToUpdate = buildings.find((b) => b.id === id);\n    if (buildingToUpdate) {\n      const updatedBuilding = { ...buildingToUpdate, temperature: newTemperature };\n      await updateBuilding(id, updatedBuilding);\n      setBuildings((prev) =>\n        prev.map((b) => (b.id === id ? updatedBuilding : b))\n      );\n    }\n  };\n\n  return (\n    <div className=\"building-list\">\n      {buildings.map((building) => (\n        <div key={building.id} className=\"building-card\">\n          <h3>{building.name}</h3>\n          <p>Location: {building.location}</p>\n          <p>Status: {building.status}</p>\n          <p>Current Temperature: {building.temperature}Â°C</p>\n          <div className=\"temperature-controls\">\n            <label>\n              New Temperature:\n              <input\n                type=\"number\"\n                defaultValue={building.temperature}\n                id={`temp-input-${building.id}`}\n              />\n            </label>\n            <button\n              className=\"btn-update\"\n              onClick={() => {\n                const input = document.getElementById(\n                  `temp-input-${building.id}`\n                ) as HTMLInputElement;\n                handleTemperatureUpdate(building.id, Number(input.value));\n              }}\n            >\n              Update Temperature\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default BuildingList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}